{"version":3,"sources":["features/blocks/index.tsx","features/web3/connectors.ts","features/web3/ConnectButton.tsx","features/tokens/index.tsx","features/web3/Web3ConnectionManager.tsx","features/web3/hooks.ts","App.tsx","serviceWorker.ts","features/web3/WrappedWeb3ReactProvider.tsx","index.tsx"],"names":["BlockNumber","useWeb3React","chainId","library","useState","blockNumber","setBlockNumber","useEffect","stale","getBlockNumber","then","catch","updateBlockNumber","on","removeListener","undefined","role","aria-label","toLocaleString","CHAINS","MAINNET","ROPSTEN","RINKEBY","KOVAN","RPC_URLS","process","REACT_APP_RPC_URL_MAINNET","REACT_APP_RPC_URL_ROPSTEN","REACT_APP_RPC_URL_RINKEBY","REACT_APP_RPC_URL_KOVAN","injected","InjectedConnector","supportedChainIds","Object","values","network","NetworkConnector","urls","fromEntries","map","i","defaultChainId","pollingInterval","ConnectButton","activate","style","display","onClick","ERC20_ABI","require","TokenInfo","address","account","tokenDetails","setTokenDetails","contract","ethers","Contract","a","Promise","all","name","symbol","balanceOf","toString","justifyContent","Web3ConnectionManager","children","context","connector","active","triedEager","tried","setTried","isAuthorized","useEagerConnect","suppress","error","ethereum","window","handleConnect","console","log","handleChainChanged","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","useInactiveListener","App","className","Boolean","location","hostname","match","getLibrary","provider","Web3Provider","WrappedWeb3ReactProvider","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e5746121.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\n\nfunction BlockNumber() {\n  const { chainId, library } = useWeb3React();\n  const [blockNumber, setBlockNumber] = useState<number | null | undefined>();\n\n  useEffect(() => {\n    if (!!library) {\n      let stale = false;\n\n      library\n        .getBlockNumber()\n        .then((blockNumber: number) => {\n          if (!stale) {\n            setBlockNumber(blockNumber);\n          }\n        })\n        .catch(() => {\n          if (!stale) {\n            setBlockNumber(null);\n          }\n        });\n\n      const updateBlockNumber = (blockNumber: number) => {\n        setBlockNumber(blockNumber);\n      };\n      library.on('block', updateBlockNumber);\n\n      return () => {\n        stale = true;\n        library.removeListener('block', updateBlockNumber);\n        setBlockNumber(undefined);\n      };\n    }\n  }, [library, chainId]); // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return (\n    <>\n      <span>Block Number</span>\n      <span role=\"img\" aria-label=\"numbers\">\n        ðŸ”¢\n      </span>\n      <span>\n        {typeof blockNumber === 'number'\n          ? blockNumber.toLocaleString()\n          : blockNumber === null\n          ? 'Error'\n          : !!library\n          ? '...'\n          : 'awaiting connection...'}\n      </span>\n    </>\n  );\n}\n\nexport default BlockNumber;\n","import { InjectedConnector } from '@web3-react/injected-connector';\nimport { NetworkConnector } from '@web3-react/network-connector';\n\nconst CHAINS = {\n  MAINNET: 1,\n  ROPSTEN: 3,\n  RINKEBY: 4,\n  KOVAN: 42,\n};\n\nconst POLLING_INTERVAL = 12000;\nconst RPC_URLS: { [chainId: number]: string } = {\n  [CHAINS.MAINNET]: process.env.REACT_APP_RPC_URL_MAINNET as string,\n  [CHAINS.ROPSTEN]: process.env.REACT_APP_RPC_URL_ROPSTEN as string,\n  [CHAINS.RINKEBY]: process.env.REACT_APP_RPC_URL_RINKEBY as string,\n  [CHAINS.KOVAN]: process.env.REACT_APP_RPC_URL_KOVAN as string,\n};\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: Object.values<number>(CHAINS),\n});\n\nexport const network = new NetworkConnector({\n  urls: Object.fromEntries(\n    Object.values<number>(CHAINS).map(i => [i, RPC_URLS[i]])\n  ),\n  defaultChainId: CHAINS.MAINNET,\n  pollingInterval: POLLING_INTERVAL,\n});\n","import { useWeb3React } from '@web3-react/core';\nimport React from 'react';\n\nimport { injected } from './connectors';\n\nfunction ConnectButton() {\n  const { activate } = useWeb3React();\n\n  return (\n    <button style={{ display: 'block' }} onClick={() => activate(injected)}>\n      Connect with MetaMask\n    </button>\n  );\n}\n\nexport default ConnectButton;\n","import { Web3Provider } from '@ethersproject/providers';\nimport { useWeb3React } from '@web3-react/core';\nimport ethers, { BigNumber } from 'ethers';\nimport React, { useEffect, useState } from 'react';\nimport ConnectButton from '../web3/ConnectButton';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst ERC20_ABI = require('./erc20.abi.json');\n\ntype Erc20DetailsObject = {\n  name?: string;\n  symbol?: string;\n  balanceOf?: BigNumber;\n};\n\nfunction TokenInfo({ address }: { address: string }) {\n  const { library, account } = useWeb3React<Web3Provider>();\n\n  const [tokenDetails, setTokenDetails] = useState<Erc20DetailsObject | null>(\n    null\n  );\n\n  useEffect(() => {\n    if (!!library && typeof address !== 'undefined') {\n      const contract = new ethers.Contract(address, ERC20_ABI, library);\n\n      (async () => {\n        const [name, symbol, balanceOf] = await Promise.all([\n          contract.name(),\n          contract.symbol(),\n          account ? contract.balanceOf(account) : undefined,\n        ]);\n\n        setTokenDetails({ name, symbol, balanceOf });\n      })();\n    }\n  }, [account, address, library]);\n\n  return (\n    <div>\n      {address}:{' '}\n      {(tokenDetails && (\n        <>\n          {tokenDetails.name}\n          {(account && (\n            <p>\n              Balance of {account}:{' '}\n              {`${tokenDetails.balanceOf?.toString()} ${tokenDetails.symbol}`}\n            </p>\n          )) || (\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <ConnectButton />\n            </div>\n          )}\n        </>\n      )) ||\n        '...'}\n    </div>\n  );\n}\n\nexport default TokenInfo;\n","import { Web3Provider } from '@ethersproject/providers';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect } from 'react';\n\nimport { useEagerConnect, useInactiveListener } from './hooks';\nimport { network } from './connectors';\n\nfunction Web3ConnectionManager({ children }: { children: JSX.Element }) {\n  const context = useWeb3React<Web3Provider>();\n  const { connector, activate, active } = context;\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  useEffect(() => {\n    if (triedEager && !active) {\n      activate(network);\n    }\n  }, [triedEager, active, connector, activate]);\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager);\n\n  return children;\n}\n\nexport default Web3ConnectionManager;\n","import { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\n\nimport { injected } from './connectors';\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React();\n\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3React();\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const { ethereum } = window as any; // TODO: Fix typing\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\");\n        activate(injected);\n      };\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId);\n        activate(injected);\n      };\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId);\n        activate(injected);\n      };\n\n      ethereum.on('connect', handleConnect);\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      ethereum.on('networkChanged', handleNetworkChanged);\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect);\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          ethereum.removeListener('networkChanged', handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n}\n","import React from 'react';\n\nimport BlockNumber from './features/blocks';\nimport TokenInfo from './features/tokens';\nimport Web3ConnectionManager from './features/web3/Web3ConnectionManager';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Web3ConnectionManager>\n      <div className=\"App\">\n        <BlockNumber />\n        <TokenInfo address=\"0x6b175474e89094c44da98b954eedeac495271d0f\" />\n      </div>\n    </Web3ConnectionManager>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Web3Provider } from '@ethersproject/providers';\nimport { Web3ReactProvider } from '@web3-react/core';\nimport React from 'react';\n\nfunction getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider);\n  library.pollingInterval = 12000;\n  return library;\n}\n\nfunction WrappedWeb3ReactProvider({ children }: { children: JSX.Element }) {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>{children}</Web3ReactProvider>\n  );\n}\n\nexport default WrappedWeb3ReactProvider;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WrappedWeb3ReactProvider from './features/web3/WrappedWeb3ReactProvider';\n\nReactDOM.render(\n  <WrappedWeb3ReactProvider>\n    <App />\n  </WrappedWeb3ReactProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}